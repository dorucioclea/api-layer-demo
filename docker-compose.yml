version: '2.1'

networks:
  internal:
    external:
      # if this isn't explicitly set it inherits from the containing folder name (floramedia or not)
      name: ${PLATFORM_NAME}-internal

volumes:
  database_data:
    external:
      name: ${PLATFORM_NAME}-database_data
  konga_data:
    external:
      name: ${PLATFORM_NAME}-konga_data

services:

  # ---------------------------------
  # Database
  # ---------------------------------

  db:
    image: postgres:9.6-alpine
    environment:
      PGUSER: postgres
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - database_data:/var/lib/postgresql/data
    networks:
      - internal
    restart: ${KONG_RESTART_POLICY:-unless-stopped}

  # ---------------------------------
  # Authorization modules
  # ---------------------------------

  kong:
    container_name: kong
    build: ./provisioning/kong
    environment:
      KONG_SSL: 'on'
      KONG_ADMIN_SSL: 'on'
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      # # allow large headers
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}

      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:80, 0.0.0.0:8443 ssl
      KONG_LOG_LEVEL: debug

      KONG_PLUGINS: bundled,kong-oidc-auth,jwt-keycloak
      # allow large headers
      KONG_NGINX_PROXY_LARGE_CLIENT_HEADER_BUFFERS: "16 128k"

    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: kong health
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 80:80
      - 8001:8001
      - 8443:8443
      - 8444:8444
    networks:
      - internal
    extra_hosts:
       - "floramedia.local:127.0.0.1"
    command: ["kong", "start"]

  db-konga:
    image: postgres:11.3
    environment:
      POSTGRES_DB: ${KONGA_PG_DATABASE:-konga}
      POSTGRES_PASSWORD: ${KONGA_PG_PASSWORD:-konga}
      POSTGRES_USER: ${KONGA_PG_USER:-konga}
      STORAGE_PATH: /kongadata
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - internal
    volumes:
      - ${PWD}/.data/konga:/kongadata
    restart: ${KONG_RESTART_POLICY:-unless-stopped}
  konga-prepare:
    image: pantsel/konga:0.14.1
    command: -c prepare -a postgres -u postgresql://${KONGA_PG_USER:-konga}:${KONGA_PG_PASSWORD:-konga}@db-konga/${KONGA_PG_DATABASE:-konga}
    depends_on:
      - db-konga
    restart: on-failure
  konga:
    image: pantsel/konga:0.14.1
    depends_on:
      - db-konga
    environment:
      - VIRTUAL_PORT=1337
      # - LETSENCRYPT_HOST=${KONGA_VIRTUAL_HOST}
      - NODE_ENV=production
      # - TOKEN_SECRET=${KONGA_TOKEN_SECRET}
      - DB_ADAPTER=postgres
      - DB_URI=postgresql://konga:konga@db-konga/konga
      - KONGA_SEED_USER_DATA_SOURCE_FILE=/provisioning/dashboard/konga/konga.users.js
      - KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE=/provisioning/dashboard/konga/konga.nodes.js
    volumes:
      - './konga.users.js:/konga.users.js:ro'
      - './konga.nodes.js:/konga.nodes.js:ro'
    ports: 
      - 1337:1337
    restart: ${KONG_RESTART_POLICY:-unless-stopped}
    networks:
      - internal

  keycloak:
    build: ./provisioning/keycloak
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: db
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: ${KEYCLOAK_PG_PASSWORD}

      KEYCLOAK_USER: ${KEYCLOAK_GLOBAL_ADMIN}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_GLOBAL_PASSWORD}

      PROXY_ADDRESS_FORWARDING: 'true'
      PROXY_PORT_FORWARDING: 'true'
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8080:8080
    networks:
      - internal
  
  # ---------------------------------
  # Auth builder Container
  # ---------------------------------

  auth:
    build: ./provisioning/gateway
    environment:
      KEYCLOAK_GLOBAL_ADMIN: ${KEYCLOAK_GLOBAL_ADMIN}
      KEYCLOAK_GLOBAL_PASSWORD: ${KEYCLOAK_GLOBAL_PASSWORD}
      KEYCLOAK_KONG_CLIENT: ${KEYCLOAK_KONG_CLIENT}
      BASE_DOMAIN: ${BASE_DOMAIN}
      BASE_HOST: ${BASE_HOST}
      PLATFORM_NAME: ${PLATFORM_NAME}
      KEYCLOAK_INTERNAL: ${KEYCLOAK_INTERNAL}
      KONG_INTERNAL: ${KONG_INTERNAL}
      KONGA_INTERNAL: ${KONGA_INTERNAL}
    command: help
    networks:
      - internal

  demo-service:
    image: demo-service
    build: ./simple-demo-service
    environment:

      APP_NAME: demo-service
      APP_PORT: 3013

      APP_INTERNAL: http://demo-service:3013
      BASE_HOST: ${BASE_HOST}
      KEYCLOAK_INTERNAL: ${KEYCLOAK_INTERNAL}
      KONG_INTERNAL: ${KONG_INTERNAL}
    volumes:
      - ./simple-demo-service:/code
    ports:
      - 3013:3013
    command: start
    networks:
      - internal

  # nginx:
  #   image: nginx
  #   build: ./provisioning/nginx
  #   depends_on:
  #   - keycloak
  #   - kong
  #   networks:
  #   - internal
  #   ports:
  #   - "80:80"
  #   - "443:443"
  #   volumes:
  #   - ./provisioning/nginx/conf.d:/etc/nginx/conf.d
  #   - ./provisioning/nginx/html:/usr/share/nginx/html